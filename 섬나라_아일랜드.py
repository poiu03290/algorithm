# 섬나라 아일랜드(BFS 활용)
# 섬나라 아일랜드의 지도가 격자판의 정보로 주어집니다. 각 섬은 1로 표시되어 상하좌우와 대각선으로 연결되어 있으며, 0은 바다입니다. 
# 섬나라 아일랜드에 몇 개의 섬이 있는지 구하는 프로그램을 작성하세요.

# 1 1 0 0 0 1 0
# 0 1 1 0 1 1 0
# 0 1 0 0 0 0 0
# 0 0 0 1 0 1 1
# 1 1 0 1 1 0 0
# 1 0 0 0 1 0 0
# 1 0 1 0 1 0 0

# 만약 위와 같다면 

# ▣ 입력설명
# 첫 번째 줄에 자연수 N(3<=N<=20)이 주어집니다.
# 두 번째 줄부터 격자판 정보가 주어진다.

# ▣ 출력설명
# 첫 번째 줄에 섬의 개수를 출력한다.

# ▣ 입력예제 1 
# 7
# 1 1 0 0 0 1 0
# 0 1 1 0 1 1 0
# 0 1 0 0 0 0 0
# 0 0 0 1 0 1 1
# 1 1 0 1 1 0 0
# 1 0 0 0 1 0 0
# 1 0 1 0 1 0 0

# ▣ 출력예제 1
# 5

import sys
from collections import deque
n = int(input())
dx = [1, 0, -1, 0, 1, 1, -1, -1]
dy = [0, -1, 0, 1, 1, -1, -1, 1]
board = [list(map(int, input().split())) for _ in range(n)]
cnt = 0
Q = deque()
for i in range(n):  # board를 2중for문을 통해 탐색.
    for j in range(n):
        if board[i][j] == 1:  # 섬발견
            board[i][j] = 0   # 발견한 섬을 0으로 초기화(체크)
            Q.append((i, j))  # 발견한 섬의 위치를 Q에 넣어.
            while Q:
                tmp = Q.popleft()   # 발견한 섬을 꺼내(현재 자리를 뜻함.)
                for k in range(8):  # 대각선까지 돌아야하니까 8방향으로 돎.
                    x = tmp[0] + dx[k]
                    y = tmp[1] + dy[k]
                    if 0 <= x < n and 0 <= y < n and board[x][y] == 1:  # 1이라도 되어있어야 섬이니까 1로 가야함.
                        board[x][y] = 0  # 또 발견한 섬을 체크
                        Q.append((x, y))  # 또 넣어.
            cnt += 1
print(cnt)