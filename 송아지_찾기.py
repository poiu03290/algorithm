# 송아지 찾기(BFS : 상태트리탐색): 출발점에서 목표지점까지의 최단거리를 구할때 BFS를 이용
# 현수는 송아지를 잃어버렸다. 다행히 송아지에는 위치추적기가 달려 있다. 현수의 위치와 송아
# 지의 위치가 직선상의 좌표 점으로 주어지면 현수는 현재 위치에서 송아지의 위치까지 다음과 같은 방법으로 이동한다. 
# 현수는 스카이 콩콩을 타고 가는데 한 번의 점프로 앞으로 1, 뒤로 1, 앞으로 5를 이동할 수 있다. 
# 최소 몇 번의 점프로 현수가 송아지의 위치까지 갈 수 있는지 구하는 프로그램을 작성하세요.

# ▣ 입력설명
# 첫 번째 줄에 현수의 위치 S와 송아지의 위치 E가 주어진다. 직선의 좌표 점은 1부터 10,000까지이다.

# ▣ 출력설명
# 점프의 최소횟수를 구한다.

# ▣ 입력예제 1 
# 5 14

# ▣ 출력예제 1
# 3

import sys
from collections import deque
MAX = 10000   # 좌표의 맥시멈이 1만이니까.
ch = [0] * (MAX + 1)  # 인덱스가 0번부터 생기니까 MAX + 1
dis = [0] * (MAX + 1)
n, m = map(int, input().split())
ch[n] = 1   # 여기서 출발하니까 체크걸고(중복안되게)
dis[n] = 0  # 출발전이니까 0번만에시도했으니 0
dQ = deque()
dQ.append(n)   # 출발점을 추가
while dQ:
    now = dQ.popleft()  # Q에서 하나 뽑은거 
    if now == m:
        break
    for next in(now-1, now+1, now+5):   # 3갈래로 돎
        if 0 < next <= MAX:
            if ch[next] == 0:  # 중복방지
                dQ.append(next)
                ch[next] = 1  # 중복방지 체크
                dis[next] = dis[now] + 1   # 여기서 +1은 몇번만에 가는지, 시도횟수를 뜻함.
print(dis[m])