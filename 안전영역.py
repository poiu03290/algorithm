# 안전영역(BFS) : 격자판에서 특정영역을 탐지해서 영역의 넓이를 찾아내는 등 DFS나 BFS둘다 사용가능.
# 재난방재청에서는 많은 비가 내리는 장마철에 대비해서 다음과 같은 일을 계획하고 있다. 
# 먼저 어떤 지역의 높이 정보를 파악한다. 그 다음에 그 지역에 많은 비가 내렸을 때 물에 
# 잠기지 않는 안전한 영역이 최대로 몇 개가 만들어 지는 지를 조사하려고 한다. 
# 이때, 문제를 간단하게 하기 위하여, 장마철에 내리는 비의 양에 따라 일정한 높이 이하의 모든 지점은 물에 잠긴다고 가정한다.
# 어떤 지역의 높이 정보는 행과 열의 크기가 각각 N인 2차원 배열 형태로 주어지며 
# 배열의 각 원소는 해당 지점의 높이를 표시하는 자연수이다. 예를 들어, 다음은 N=5인 지역의 높이 정보이다.
# 이제 위와 같은 지역에 많은 비가 내려서 높이가 4 이하인 모든 지점이 물에 잠겼다고 하자. 
# 이 경우에 물에 잠기는 지점을 회색으로 표시하면 다음과 같다.
# 물에 잠기지 않는 안전한 영역이라 함은 물에 잠기지 않는 지점들이 
# 위, 아래, 오른쪽 혹은 왼쪽으로 인접해 있으며 그 크기가 최대인 영역을 말한다. 
# 위의 경우에서 물에 잠기지않는 안전한 영역은 5개가 된다(꼭지점으로만 붙어 있는 두 지점은 인접하지 않는다고 취급한다).
# 또한 위와 같은 지역에서 높이가 6이하인 지점을 모두 잠기게 만드는 많은 비가 내리면 물에 
# 잠기지 않는 안전한 영역은 아래 그림에서와 같이 네 개가 됨을 확인할 수 있다.
# 이와 같이 장마철에 내리는 비의 양에 따라서 물에 잠기지 않는 안전한 영역의 개수는 다르게 된다. 
# 위의 예와 같은 지역에서 내리는 비의 양에 따른 모든 경우를 다 조사해 보면 물에 
# 잠기지 않는 안전한 영역의 개수 중에서 최대인 경우는 5임을 알 수 있다.
# 어떤 지역의 높이 정보가 주어졌을 때, 장마철에 물에 잠기지 않는 안전한 영역의 최대 개수를 계산하는 프로그램을 작성하라.

# ▣ 입력설명
# 첫째 줄에는 어떤 지역을 나타내는 2차원 배열의 행과 열의 개수를 나타내는 수 N이 입력된다. 
# N은 2 이상 100 이하의 정수이다. 둘째 줄부터 N 개의 각 줄에는 2차원 배열의 첫 
# 번째 행부터 N번째 행까지 순서대로 한 행씩 높이 정보가 입력된다. 
# 각 줄에는 각 행의 첫 번째 열부터 N번째 열까지 N 개의 높이 정보를 나타내는 자연수가 빈 칸을 사이에 두고 입력된다. 
# 높이는 1이상 100 이하의 정수이다.

# ▣ 출력설명
# 첫째 줄에 장마철에 물에 잠기지 않는 안전한영역의 최대 개수를 출력한다.

# ▣ 입력예제 1 
# 5
# 6 8 2 6 2
# 3 2 3 4 6
# 6 7 3 3 2
# 7 2 5 3 6
# 8 9 5 2 7

# ▣ 출력예제 1
# 5

# 출처 : 한국정보올림피아드


import sys
#sys.stdin=open("input.txt", "r")
dx=[-1, 0, 1, 0]
dy=[0, 1, 0, -1]
sys.setrecursionlimit(10**6)
def DFS(x, y, h):
    ch[x][y]=1
    for i in range(4):
        xx=x+dx[i]
        yy=y+dy[i]
        if 0<=xx<n and 0<=yy<n and ch[xx][yy]==0 and board[xx][yy]>h:
            DFS(xx, yy, h)

if __name__=="__main__":
    n = int(input())
    cnt = 0
    res = 0
    board=[list(map(int, input().split())) for _ in range(n)]
    for h in range(100):
        ch=[[0]*n for _ in range(n)]
        cnt=0
        for i in range(n):
            for j in range(n):
                if ch[i][j]==0 and board[i][j]>h:
                    cnt+=1
                    DFS(i, j, h)
        res=max(res, cnt)
        if cnt==0:
            break
    print(res)



# 섬나라나 단지번호붙이기 문제는 2차원 리스트를 한번만 돌면서 영역을 찾기때문에 지도 자체를 바꿨다(1을 0으로 등)
# 근데 이건 최대높이를 4, 5, 6 다 돌아야하기때문에 지도 자체를 바꾸면 안되고 ch를 만들어야함.

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]
sys.setrecursionlimit(10 ** 6)  # 파이썬에서 재귀함수를 빡세게 돌릴때, 타임리미트를 설정해줘야함.(10 ** 6) 을 넘어가면 알아서 탈출함.

 
def DFS(x, y, h):
    ch[x][y] = 1   # board에다가 하면 안돼.
    for i in range(4):
        xx = x + dx[i]
        yy = y + dy[i]
        if 0 <= xx < n and 0 <= yy < n and ch[xx][yy] == 0 and board[xx][yy] > h:
            DFS(xx, yy, h)

if __name__ == "__main__":
    n = int(input())
    cnt = 0
    res = 0
    board = [list(map(int, input().split())) for _ in range(n)]
    for h in range(100):   # 문제에서 높이가 최대 100이라고 했으니까
        ch = [[0] * n for _ in range(n)]
        cnt = 0  # h가 바뀔때 즉, 높이가 바뀌어서 기준이 바뀔때 cnt가 새롭게 초기화.
        for i in range(n):
            for j in range(n):
                if ch[i][j] == 0 and board[i][j] > h:  # h는 높이, 즉 높이보다 큰 영역을 찾아야함(안전영역)
                    cnt += 1
                    DFS(i, j, h)   # DFS에 위치정보인 i와 j를 넘겨줌과 동시에 높이도 넘겨줘야함(그 높이보다 큰곳을 탐색해야하기때문에)
        res = max(res, cnt)  # res 최댓값 찾기
        if cnt == 0:  # h for문을 break  (h가 최대높이일때 101번쨰 if문이 성립이 안되니까 cnt가 0이 됨. 그럼 그 이후 높이값 계산안함.)
            break
    print(res) 
        






    